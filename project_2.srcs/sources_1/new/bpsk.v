// File Name: hdlsrc/bpsk1/bpsk1.v
// Created: 2023-07-17 17:35:43
// 
// Generated by MATLAB 9.14 and HDL Coder 4.1
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 0.2
// Target subsystem base rate: 0.2
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        0.2
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// Out1                          ce_out        0.2
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: bpsk1
// Source Path: bpsk1
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module bpsk1
          (clk,
           reset,
           clk_enable,
           ce_out,
           Out1);


  input   clk;
  input   reset;
  input   clk_enable;
  output  ce_out;
  output  [7:0] Out1;  // uint8


  wire enb;
  wire [15:0] count_step;  // uint16
  reg [15:0] Counter_Free_Running_out1;  // uint16
  wire [15:0] count;  // uint16
  wire signed [15:0] BPSK_Modulator_Baseband1_out1_re;  // sfix16_En15
  wire signed [15:0] BPSK_Modulator_Baseband1_out1_im;  // sfix16_En15
  wire [7:0] BPSK_Demodulator_Baseband1_out1;  // uint8


  assign count_step = 16'b0000000000000001;



  assign enb = clk_enable;

  assign count = Counter_Free_Running_out1 + count_step;



  // Free running, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  always @(posedge clk or posedge reset)
    begin : Counter_Free_Running_process
      if (reset == 1'b1) begin
        Counter_Free_Running_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Counter_Free_Running_out1 <= count;
        end
      end
    end



  BPSK_Modulator_Baseband1 u_BPSK_Modulator_Baseband1 (.in0(Counter_Free_Running_out1),  // uint16
                                                       .out0_re(BPSK_Modulator_Baseband1_out1_re),  // sfix16_En15
                                                       .out0_im(BPSK_Modulator_Baseband1_out1_im)  // sfix16_En15
                                                       );

  BPSK_Demodulator_Baseband1 u_BPSK_Demodulator_Baseband1 (.in0_re(BPSK_Modulator_Baseband1_out1_re),  // sfix16_En15
                                                           .in0_im(BPSK_Modulator_Baseband1_out1_im),  // sfix16_En15
                                                           .out0(BPSK_Demodulator_Baseband1_out1)  // uint8
                                                           );

  assign Out1 = BPSK_Demodulator_Baseband1_out1;

  assign ce_out = clk_enable;

endmodule  // bpsk1